# -*- coding: utf-8 -*-
"""Project_01_DL_Breast_Cancer_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pNUSS9SqViUDJBG2gMl-AQmM64K1n6po

### **Importing the important libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

from sklearn.datasets import load_breast_cancer

breast_cancer_dataset = load_breast_cancer()

breast_cancer_dataset.feature_names

df = pd.DataFrame(breast_cancer_dataset.data, columns=breast_cancer_dataset.feature_names)
df.head()

df['target'] = breast_cancer_dataset.target
df.sample(5)

df.shape

df.info()

df.describe()

print(df['target'].value_counts())
df['target'].value_counts().plot(kind='bar',color={'red','green'})

df.groupby('target').mean()

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(df.drop('target',axis=1),df.target,test_size=0.2,random_state=1)

X_train.shape,X_test.shape,y_train.shape,y_test.shape

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()

X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

X_train

X_test[0]

y_test[0]

# Modeling
import tensorflow
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense,Input,Dropout,BatchNormalization

X_train.shape

model = Sequential()

model.add(Input(shape=(30,)))
model.add(Dense(32,activation='relu'))
model.add(Dropout(0.2))
model.add(BatchNormalization())

model.add(Dense(16,activation='relu'))
model.add(Dropout(0.2))
model.add(BatchNormalization())

model.add(Dense(1,activation='sigmoid'))

model.summary()

model.compile(optimizer='Adam',loss='binary_crossentropy',metrics=['accuracy'])

history = model.fit(X_train,y_train,epochs=100,validation_data=(X_test,y_test),batch_size=8)

plt.plot(history.history['accuracy'],label='train')
plt.plot(history.history['val_accuracy'],label='test')
plt.title('Train Accuracy vs Test Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

plt.plot(history.history['loss'],label='train')
plt.plot(history.history['val_loss'],label='test')
plt.title('Train loss vs Test loss')
plt.xlabel('Epochs')
plt.ylabel('loss')
plt.legend()
plt.show()

y_pred = model.predict(X_test)
y_pred = np.argmax(y_pred, axis=1)

y_pred

from sklearn.metrics import confusion_matrix,classification_report
confusion_matrix(y_test,y_pred.round())

sns.heatmap(confusion_matrix(y_test,y_pred),annot=True)

"""### **Building a Predictive System**"""

input_data = (0.1318529 , -1.22289689,  0.22619275, -0.02342069,  0.49000614,
        1.51274076,  0.69035091,  0.34062714,  1.00887608,  1.68985368,
        0.46502905,  0.4984039 ,  0.89667244,  0.15891919,  0.96784528,
        1.47162979,  0.71801321,  0.62374042,  0.72742307,  0.58673486,
        0.0096267 , -1.17235657,  0.16795261, -0.15304782, -0.04232703,
        0.69426554,  0.24403833, -0.07497962, -0.09827233,  0.50779424)

# change the input_data to a numpy array from tuple
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for one data point
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standarized the data
std_data = sc.transform(input_data_reshaped)

prediction = model.predict(std_data)

final = np.argmax(prediction, axis=1)

if (final==0):
    print('The tumor is Malignant')
else:
  print('The tumor is Benign')